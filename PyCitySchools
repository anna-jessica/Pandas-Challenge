# Dependencies and Setup
import pandas as pd

# File to Load (Remember to Change These)
school_data_to_load = "Resources/schools_complete.csv"
student_data_to_load = "Resources/students_complete.csv"

# Read School and Student Data File and store into Pandas Data Frames
school_data = pd.read_csv(school_data_to_load)
student_data = pd.read_csv(student_data_to_load)

# Combine the data into a single dataset
school_data_complete = pd.merge(student_data, school_data, how="left", on=["school_name", "school_name"])

school_data_complete.head()


# ## District Summary
# 
# * Calculate the total number of schools
# 
# * Calculate the total number of students
# 
# * Calculate the total budget
# 
# * Calculate the average math score 
# 
# * Calculate the average reading score
# 
# * Calculate the overall passing rate (overall average score), i.e. (avg. math score + avg. reading score)/2
# 
# * Calculate the percentage of students with a passing math score (70 or greater)
# 
# * Calculate the percentage of students with a passing reading score (70 or greater)
# 
# * Create a dataframe to hold the above results
# 
# * Optional: give the displayed data cleaner formatting

# In[84]:


total_schools = school_data_complete["school_name"].nunique()
total_students = school_data_complete["Student ID"].nunique()
total_budget = school_data_complete["budget"].sum()

average_math_score = school_data_complete["math_score"].mean()
average_reading_score = school_data_complete["reading_score"].mean()

count_passing_math = school_data_complete[school_data_complete["math_score"] > 70].count()["school_name"]
percent_passing_math = (count_passing_math / total_students) * 100
count_passing_reading = school_data_complete[school_data_complete["reading_score"] > 70].count()["school_name"]
percent_passing_reading = (count_passing_reading / total_students) * 100
overall_passing_count = school_data_complete[(school_data_complete["math_score"] > 70) & (school_data_complete["reading_score"] > 70)].count()["school_name"]
percent_overall_passing = (overall_passing_count / total_students) * 100

summary_tbl_df = pd.DataFrame({"Total Schools":[total_schools], "Total Students":[total_students],"Total Budget":[total_budget], "Average Math Score":[average_math_score],
                                 "Average Reading Score":[average_reading_score], "% Passing Math":percent_passing_math,"% Passing Reading":percent_passing_reading, "Overall Passing Rate": percent_overall_passing})

summary_tbl_df


# ## School Summary
# 

# * Create an overview table that summarizes key metrics about each school, including:
#   * School Name
#   * School Type
#   * Total Students
#   * Total School Budget
#   * Per Student Budget
#   * Average Math Score
#   * Average Reading Score
#   * % Passing Math
#   * % Passing Reading
#   * Overall Passing Rate (Average of the above two)
#   
# * Create a dataframe to hold the above results

# In[85]:


school_types = school_data.set_index(["school_name"])["type"]
per_school_counts = school_data_complete["school_name"].value_counts()
budget_per_school = school_data_complete.groupby(["school_name"]).mean()["budget"]
per_student_budget = budget_per_school/ per_school_counts
avg_math_score = school_data_complete.groupby(["school_name"]).mean()["math_score"]
avg_reading_score = school_data_complete.groupby(["school_name"]).mean()["reading_score"]
school_passing_math =  school_data_complete[school_data_complete["math_score"] > 70].groupby("school_name").count()["student_name"]
school_passing_reading =  school_data_complete[school_data_complete["reading_score"] > 70].groupby("school_name").count()["student_name"]

percent_passing_math = school_passing_math / per_school_counts * 100
percent_passing_reading = school_passing_reading / per_school_counts * 100
overall_passing_rate = (percent_passing_math + percent_passing_reading) / 2


school_summary = pd.DataFrame({"School Type":school_types, "Total Students":per_school_counts,
                               "Total School Budget":budget_per_school, "Per Student Budget":per_student_budget,
                                "Average Math Score":avg_math_score, "Average Reading Score":avg_reading_score,
                                 "% Passing Math":percent_passing_math, "% Passing Reading":percent_passing_reading,
                                 "Overall Passing Rate":overall_passing_rate})            

school_summary


# ## Top Performing Schools (By Passing Rate)

# * Sort and display the top five schools in overall passing rate

# In[86]:


top_schools = school_summary.sort_values(["Overall Passing Rate"], ascending = False)
top_schools.head(5)


# ## Bottom Performing Schools (By Passing Rate)

# * Sort and display the five worst-performing schools

# In[87]:


top_schools = school_summary.sort_values(["Overall Passing Rate"], ascending = True)
top_schools.head(5)


# ## Math Scores by Grade

# * Create a table that lists the average Reading Score for students of each grade level (9th, 10th, 11th, 12th) at each school.
# 
#   * Create a pandas series for each grade. Hint: use a conditional statement.
#   
#   * Group each series by school
#   
#   * Combine the series into a dataframe
#   
#   * Optional: give the displayed data cleaner formatting

# In[88]:


grade_9_score = school_data_complete[school_data_complete["grade"] == "9th"].groupby("school_name").mean()["math_score"]
grade_10_score = school_data_complete[school_data_complete["grade"] == "10th"].groupby("school_name").mean()["math_score"]
grade_11_score = school_data_complete[school_data_complete["grade"] == "11th"].groupby("school_name").mean()["math_score"]
grade_12_score = school_data_complete[school_data_complete["grade"] == "12th"].groupby("school_name").mean()["math_score"]

math_scores_by_grade_df = pd.DataFrame({"9th":grade_9_score, "10th":grade_10_score,
                               "11th":grade_11_score,"12th":grade_12_score})            

math_scores_by_grade_df


# ## Reading Score by Grade 

# * Perform the same operations as above for reading scores

# In[89]:


grade_9_score = school_data_complete[school_data_complete["grade"] == "9th"].groupby("school_name").mean()["reading_score"]
grade_10_score = school_data_complete[school_data_complete["grade"] == "10th"].groupby("school_name").mean()["reading_score"]
grade_11_score = school_data_complete[school_data_complete["grade"] == "11th"].groupby("school_name").mean()["reading_score"]
grade_12_score = school_data_complete[school_data_complete["grade"] == "12th"].groupby("school_name").mean()["reading_score"]

reading_scores_by_grade_df = pd.DataFrame({"9th":grade_9_score, "10th":grade_10_score,
                               "11th":grade_11_score,"12th":grade_12_score})            

reading_scores_by_grade_df


# ## Scores by School Spending

# * Create a table that breaks down school performances based on average Spending Ranges (Per Student). Use 4 reasonable bins to group school spending. Include in the table each of the following:
#   * Average Math Score
#   * Average Reading Score
#   * % Passing Math
#   * % Passing Reading
#   * Overall Passing Rate (Average of the above two)

# In[90]:


# Sample bins. Feel free to create your own bins.
spending_bins = [0, 585, 615, 645, 675]
group_names = ["<$585", "$585-615", "$615-645", "$645-675"]


# In[91]:


school_data_complete['spending_bins'] = pd.cut(school_data_complete['budget']/school_data_complete['size'], spending_bins, labels = group_names)
grouped_spending = school_data_complete.groupby('spending_bins')

avg_math = grouped_spending['math_score'].mean()
avg_read = grouped_spending['reading_score'].mean()
pass_math = school_data_complete[school_data_complete['math_score'] >= 70].groupby('budget_bins')['Student ID'].count()/grouped_spending['Student ID'].count() * 100
pass_read = school_data_complete[school_data_complete['reading_score'] >= 70].groupby('budget_bins')['Student ID'].count()/grouped_spending['Student ID'].count() * 100
overall = school_data_complete[(school_data_complete['reading_score'] >= 70) & (school_data_complete['math_score'] >= 70)].groupby('budget_bins')['Student ID'].count()/grouped_spending['Student ID'].count() * 100
                     
scores_by_spend = pd.DataFrame({
    "Average Math Score": avg_math,
    "Average Reading Score": avg_read,
    '% Passing Math': pass_math,
    '% Passing Reading': pass_read,
    "Overall Passing Rate": overall
            
})
scores_by_spend   


# ## Scores by School Size

# * Perform the same operations as above, based on school size.

# In[67]:


# Sample bins. Feel free to create your own bins.
size_bins = [0, 1000, 2000, 5000]
group_names = ["Small (<1000)", "Medium (1000-2000)", "Large (2000-5000)"]


# In[68]:


school_summary["School Size"] = pd.cut(school_summary["Total Students"], size_bins, labels = group_names)

avg_math_score =school_summary.groupby(["School Size"]).mean()['Average Math Score']
avg_reading_score = school_summary.groupby(["School Size"]).mean()['Average Reading Score']
percent_passing_math = school_summary.groupby(["School Size"]).mean()['% Passing Math']
percent_passing_reading =  school_summary.groupby(["School Size"]).mean()['% Passing Reading']
overall_passing_rate = school_summary.groupby(["School Size"]).mean()['Overall Passing Rate']

score_by_size = pd.DataFrame({"Average Math Score":avg_math_score, "Average Reading Score":avg_reading_score,
                               "% Passing Math":percent_passing_math,"% Passing Reading":percent_passing_reading,
                                    "Overall Passing Rate":overall_passing_rate})   
score_by_size


# Scores by School Type

# * Perform the same operations as above, based on school type.

# In[69]:


avg_math_score = school_summary.groupby(["School Type"]).mean()['Average Math Score']
avg_reading_score = school_summary.groupby(["School Type"]).mean()['Average Reading Score']
percent_passing_math =  school_summary.groupby(["School Type"]).mean()['% Passing Math']
percent_passing_reading =  school_summary.groupby(["School Type"]).mean()['% Passing Reading']
overall_passing_rate = school_summary.groupby(["School Type"]).mean()['Overall Passing Rate']

score_by_type = pd.DataFrame({"Average Math Score":avg_math_score, "Average Reading Score":avg_reading_score,
                               "% Passing Math":percent_passing_math,"% Passing Reading":percent_passing_reading,
                                    "Overall Passing Rate":overall_passing_rate})            
score_by_type
